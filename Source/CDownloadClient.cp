#include "CDownloadClient.h"#include "CDownloadThread.h"#include "CBasicApp.h"#include <exception>// Entry point from the main application - we're ready to start downloading.bool CDownloadClient::BeginDownloadProcess(	LListener *inListener, 											DownloaderPreferences *prefs, 											ConstStr255Param remoteUrl,											bool, bool overwriteLocal,											FSSpec *inDestination,											bool saveFile){	Str255 remoteHostname, remoteFilename, encodedRemoteUrl;	UInt16 port;	// Is this an HTTP address at all?	bool isHttp = CUrlHelper::IsHttpAddress(remoteUrl);		if(!isHttp)	{		UModalAlerts::StopAlert(rALRT_NotHTTPURL);		this->AddListener(inListener);		StopDownloadProcess();		return false;	}	CUrlHelper::GetRemoteHostname(remoteHostname, &port, remoteUrl);	CUrlHelper::GetRemotePath(remotePath, remoteUrl);	CUrlHelper::GetRemoteFilename(remoteFilename, remoteUrl);	mRemoteAddress.SetDNSAddress(remoteHostname);	mRemoteAddress.SetHostPort(port);	CUrlHelper::UrlEncode(encodedRemoteUrl, remoteUrl);		mDownloadThread = new CDownloadThread(	mTcpEndpoint, 											prefs->userAgent,											prefs->decodeMacBinary,											encodedRemoteUrl,											remoteFilename,											inDestination,											overwriteLocal,											inListener,			// Who initiated this download and wants to get its events?											&mRemoteAddress,											remotePath,														saveFile			// Saving or just storing in memory?										);	this->AddListener(mDownloadThread);	mDownloadThread->Resume();	return true;}void CDownloadClient::StopDownloadProcess(){	StartBroadcasting();	BroadcastMessage(9999, NULL);	StopBroadcasting();}