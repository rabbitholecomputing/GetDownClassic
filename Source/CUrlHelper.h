#ifndef CURLHELPER_H#define CURLHELPER_H#include <MacTypes.h>#include <TextUtils.h>#include <string.h>#include <stdlib.h>#include <ctype.h>#define kExtensionsInDB 20class CUrlHelper{	private:	typedef struct 	{		char	extension[8];		OSType 	creatorType;		OSType	fileType;	} CreatorEntry;	static CreatorEntry extensionDB[20];	public:		static void UrlEncode(Str255 outUrl, ConstStr255Param inUrl)	{		char cInUrl[256];		CopyPascalStringToC(inUrl, cInUrl);		char cTempUrl[256];		memset(cTempUrl, 0, 256);				// Ignore everything before the :// part of the URL.				int outLength = 0;		for(int i=0; i<strlen(cInUrl); i++)		{			// Alphanumeric, dot, colon, forward slash			if(	(cInUrl[i] >= 0x30 && cInUrl[i] <= 0x3F) ||				(cInUrl[i] >= 0x41 && cInUrl[i] <= 0x5A) ||				(cInUrl[i] >= 0x61 && cInUrl[i] <= 0x7A) ||				(cInUrl[i] == 0x2E || cInUrl[i] == 0x2F || cInUrl[i] == 0x3A) )			{				cTempUrl[outLength++] = cInUrl[i];			}			else			{				char encoded[3];				sprintf(encoded, "%%%02X", cInUrl[i]);				cTempUrl[outLength++] = encoded[0];				cTempUrl[outLength++] = encoded[1];				cTempUrl[outLength++] = encoded[2];			}		}				CopyCStringToPascal(cTempUrl, outUrl);	}		static bool IsHttpAddress(ConstStr255Param remoteUrl)	{		char cRemoteUrl[256];				CopyPascalStringToC(remoteUrl, cRemoteUrl);			char *doubleSlash = strstr(cRemoteUrl, "//");				if(doubleSlash == NULL)		{			// No protocol specified - assume HTTP.			return true;		}				size_t len = doubleSlash - cRemoteUrl;		return(strncmp(cRemoteUrl, "http:", len) == 0);	}		static void GetRemoteHostname(Str255 hostname, UInt16 *port, ConstStr255Param remoteUrl)	{		char cRemoteUrl[256];		char cOutput[256];		size_t firstSlash;				CopyPascalStringToC(remoteUrl, cRemoteUrl);				// Retrieve everything after the first // in the string		char *doubleSlash = strstr(cRemoteUrl, "//");				if(doubleSlash != NULL)		{			// Skip ahead of the //			doubleSlash = doubleSlash + 2;						// Retrieve everything before the first / in the string			firstSlash = strcspn(doubleSlash, "/");						memset(cOutput, 0, 255);			memcpy(cOutput, doubleSlash, firstSlash);		}		else		{			// Retrieve everything before the first / in the string			firstSlash = strcspn(cRemoteUrl, "/");						memset(cOutput, 0, 255);			memcpy(cOutput, cRemoteUrl, firstSlash);		}		// Is there a : in this string?		char *portDelimiter = strchr(cOutput, ':');				// If so, take everything between it and the end of the string. That's our port number.		if(portDelimiter != NULL)		{			char tmp[10];			strcpy(tmp, portDelimiter+1);			if(port != NULL) *port = atoi(tmp);		}		else		{			if(port != NULL) *port = 80; // default port		}				*portDelimiter = 0;		CopyCStringToPascal(cOutput, hostname);	}	static void GetRemotePath(Str255 outPath, ConstStr255Param remoteUrl)	{		char cRemoteUrl[256];		size_t firstSlash;				CopyPascalStringToC(remoteUrl, cRemoteUrl);		// Retrieve everything after the first // in the string		char *doubleSlash = strstr(cRemoteUrl, "//");				if(doubleSlash != NULL)		{			// Skip ahead of the //			doubleSlash = doubleSlash + 2;						// Retrieve everything after the first / in the string			firstSlash = strcspn(doubleSlash, "/");			CopyCStringToPascal(doubleSlash+firstSlash, outPath);		}		else		{			// Retrieve everything after the first / in the string			firstSlash = strcspn(cRemoteUrl, "/");			CopyCStringToPascal(cRemoteUrl+firstSlash, outPath);		}	}	static void GetRemoteFilename(Str255 outFilename, ConstStr255Param remoteUrl)	{		// Get everything after the last / in the remote URL.		char cRemoteUrl[256];		char *firstSlash;				CopyPascalStringToC(remoteUrl, cRemoteUrl);		firstSlash = strrchr(cRemoteUrl, '/');		CopyCStringToPascal(firstSlash+1, outFilename); 	}		static void GetRemoteFileExtension(Str255 outExtension, ConstStr255Param remoteUrl)	{		// Get everything after the last . in the URL.		char cFilename[256];		char *lastDot;		char cExtension[10];				CopyPascalStringToC(remoteUrl, cFilename);		lastDot = strrchr(cFilename, '.');				strncpy(cExtension, lastDot+1, 10);				for(int i=0; i<strlen(cExtension); i++) { cExtension[i] = toupper(cExtension[i]); }				CopyCStringToPascal(cExtension, outExtension);	}		static void GetFourCCCodes(ConstStr255Param filename, OSType *creator, OSType *file)	{		/* todo: the DB should be in a resource somewhere */		Str255 extension;		char cExtension[10];				GetRemoteFileExtension(extension, filename);		CopyPascalStringToC(extension, cExtension);				for(int i=0; i<kExtensionsInDB; i++)		{			if(strncmp(extensionDB[i].extension, cExtension, 10) == 0)			{				*creator 	= extensionDB[i].creatorType;				*file		= extensionDB[i].fileType;				return;			}		}				*creator 	= OSType('????');		*file		= OSType('????');		return;	}};#endif