#ifndef DOWNLOADTHREAD_H#define DOWNLOADTHREAD_H#include <LHTTPConnection.h>#include <UNetworkFactory.h>#include <LListener.h>#include <LBroadcaster.h>#include <LWindow.h>#include <LMacTCPTCPEndpoint.h>#include <LOpenTptTCPEndpoint.h>#include <LTCPEndpoint.h>#include <LHTTPConnection.h>#include <LHTTPMessage.h>#include <LFileStream.h>#include <LMacBinaryFile.h>#include <TextUtils.h>#include <Strings.h>#include "CProgressBar.h"#include "CUrlHelper.h"#include "Constants.h"#include "CPreferencesDialog.h"#include "macbin3.h"#define kMaxRedirectsToAllow ( 10 )class CDownloadClient;class CDownloadThread : public LThread, public LListener, public LBroadcaster{	private:		LTCPEndpoint 		*oEndpoint;		//CDownloadClient *oMaster;		LListener			*oInterestedParty;		LHTTPConnection 	*mConnection;		LHTTPResponse 		mHttpResponse;		LInternetAddress 	mRemoteAddress;		LFileStream			mDownloadFile;		DOWNLOAD_STATE	mState;				bool			bSuccess;		bool			bOverrideStatusMsg;		bool			bFileDownloadInProgress;		bool			bSavingFile;						OSErr			iDownloadSaveResult;				// Infinite redirect detection.		UInt8			iRedirectsRemaining;				// Some important strings.		Str255			pRemoteUrl;		Str255			pRemotePath;		Str255			pRemoteFilename;		ConstStringPtr	pUserAgent;				FSSpec 			mDestination;		Boolean			bDestinationIsGood;				// MacBinary decoding		Boolean			bDecodeMacBinary;		Boolean			bMacBinaryWasDecoded;		OSErr			iMacBinaryDecodeResult;				// Download status.		UInt64			iFileSize;		UInt8			iProgressPercentage;						// Batch option for saving a file.		Boolean			bOverwriteLocal;				// Speed calculation.		UInt64			iLastChunkTickCount;		UInt64			iLastChunkSizeBytes;		UInt64			iLastChunkTotalCompletedBytes;		UInt64			iElapsedTicks;	public:						CDownloadThread(								LTCPEndpoint *inEndpoint,							ConstStr255Param userAgent, 							Boolean decodeMacBinary, 							ConstStr255Param url,							ConstStr255Param remoteFilename,							FSSpec *presetDestination,							Boolean overwriteLocal,							LListener *theListener,							LInternetAddress *inRemoteAddress,							ConstStr255Param remotePath,							Boolean saveFile						);				void 	ListenToMessage(MessageT inMessage, void *ioParam);				virtual void	DisplayProgress(char * theStatus);		virtual void	DisplayProgress(LStr255 theStatus);				virtual void* 	Run();		virtual void	ProcessDownloadedFile(LHTTPResponse *theResponse);				void	CancelDownload(DOWNLOAD_STATE);			protected:		~CDownloadThread();						void	DecodeMacBinary(FSSpec *spec);				void	CleanupDownloadAttempt();								void 	UpdateDLProgress(SProgressMessage *progress);				void 	UpdateProgressBar(UInt8 percentage);				void	ReceivedFileChunk(SProgressMessage *chunkMsg);};#endif