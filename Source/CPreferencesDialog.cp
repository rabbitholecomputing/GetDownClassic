#include "CPreferencesDialog.h"DownloaderPreferences *CPreferencesDialog::currentPrefs = NULL;CPreferencesDialog::CPreferencesDialog(){	if(CVolumeHelper::SystemDiskIsLocked())	{		// Special case: System disk is locked. Initialize but do not save prefs.		MakeDefaults(currentPrefs);	}	else	{		// Load preferences if they exist.		if(currentPrefs == NULL)		{			currentPrefs = new DownloaderPreferences;		}				if(!LoadPreferences(currentPrefs))		{						LPreferencesFile prefsFile(strPrefsFileName, true);			SInt16 prefsRefNum = prefsFile.OpenOrCreateResourceFork(fsRdWrPerm, kCreatorType, kPrefsType, 0);						StResourceContext resContext(prefsRefNum);				StNewResource prefsResource(rPrefsResourceType, 128, 16384, true);			Handle hResource = prefsResource.Get();						DownloaderPreferences *prefsInResource = (DownloaderPreferences *)*hResource;					MakeDefaults(prefsInResource);						::HNoPurge(hResource);			::ChangedResource(hResource);						LoadPreferences(currentPrefs);		}	}}URLPreset *CPreferencesDialog::GetUrlPreset(UInt8 index){	return &currentPrefs->urlPresets[index];}void CPreferencesDialog::UpdateTableData(CUrlPresetTable *table){	for(int i=0; i<8; i++)	{		if(currentPrefs->urlPresets[i].name == 0) currentPrefs->urlPresets[i].inUse = false;				int row = (i / 2) + 1;		int col = (i % 2) + 1;			table->SetCellData((TableCellT){ row, col }, (void *)&currentPrefs->urlPresets[i]);			}		table->Refresh();}void CPreferencesDialog::ShowPreferences(){	bool cancelled = false;	if(CVolumeHelper::SystemDiskIsLocked())	{		::StopAlert(rALRT_PrefsOnLockedVolume, nil);		return;	}	StDialogHandler prefsDialog(PPob_PreferencesDialog, this);	LStdButton *paneDefaultFolder = (LStdButton *)prefsDialog.GetDialog()->FindPaneByID(pane_prefs_btn_DownloadLoc);	paneDefaultFolder->SetDescriptor(currentPrefs->downloadFolder.name);		CUrlPresetTable *urlPresetTable = (CUrlPresetTable *)prefsDialog.GetDialog()->FindPaneByID(pane_prefs_tbl_UrlPreset);	UpdateTableData(urlPresetTable);		LStdCheckBox *decodeMacBinary = (LStdCheckBox *)prefsDialog.GetDialog()->FindPaneByID(pane_prefs_chk_MacBinary);	decodeMacBinary->SetValue(currentPrefs->decodeMacBinary);		LEditField *paneUserAgent = (LEditField *)prefsDialog.GetDialog()->FindPaneByID(pane_prefs_edt_UserAgent);	paneUserAgent->SetDescriptor(currentPrefs->userAgent);	while (true) {		MessageT hitMessage = prefsDialog.DoDialog();		if (hitMessage == msg_Cancel)		{			cancelled = true;			break;		}		else if (hitMessage == msg_OK)		{			cancelled = false;			break;		}		else if (hitMessage == cmd_SetDownloadFolder)		{			ShowDownloadFolderSetter();		}		else if (hitMessage == cmd_EditPresetUrl)		{			ShowEditPresetUrlDialog(urlPresetTable);			UpdateTableData(urlPresetTable);		}	}		if(!cancelled)	{		// Update the values if the user pressed OK.		paneUserAgent->GetDescriptor(currentPrefs->userAgent);		currentPrefs->decodeMacBinary = decodeMacBinary->GetValue();		SavePreferences(currentPrefs);	}}void CPreferencesDialog::ShowEditPresetUrlDialog(CUrlPresetTable *table){	bool cancelled;	TableCellT selectedCell;	table->GetSelectedCell(selectedCell);		if(selectedCell.row == 0 && selectedCell.col == 0)	{		UModalAlerts::NoteAlert(rALRT_NoPresetSelected);		return;	}		URLPreset presetData;	table->GetCellData(selectedCell, &presetData);	StDialogHandler presetDialog(PPob_EditPresetUrlDialog, this);	LEditField *paneName = (LEditField *)presetDialog.GetDialog()->FindPaneByID(pane_urls_edt_Name);	paneName->SetDescriptor(presetData.name);	LEditField *paneUrl = (LEditField *)presetDialog.GetDialog()->FindPaneByID(pane_urls_edt_URL);	paneUrl->SetDescriptor(presetData.url);		while (true) {		MessageT hitMessage = presetDialog.DoDialog();		if (hitMessage == msg_Cancel)		{			cancelled = true;			break;		}		else if (hitMessage == msg_OK)		{			cancelled = false;			break;		}	}		if(!cancelled)	{		// Save the data if the user pressed Save.		Str63 inputName;		paneName->GetDescriptor(inputName);		LString::CopyPStr(inputName, currentPrefs->urlPresets[(selectedCell.row - 1)].name);				Str255 inputUrl;		paneUrl->GetDescriptor(inputUrl);		LString::CopyPStr(inputUrl, currentPrefs->urlPresets[(selectedCell.row - 1)].url);				if(inputName[0] != 0) currentPrefs->urlPresets[(selectedCell.row - 1)].inUse = true;	}}void CPreferencesDialog::ShowDownloadFolderSetter(){	}void CPreferencesDialog::MakeDefaults(DownloaderPreferences *prefs){	// Set up the default preferences for the current version of the preferences structure.	prefs->magic = kPrefsMagic;	prefs->version = 2;		LStr255::CopyPStr(strUserAgent, prefs->userAgent);		prefs->decodeMacBinary = true;	prefs->decodeBinHex = true;	::FSMakeFSSpec(0, 0, strPrefsDefaultDLFolder, &prefs->downloadFolder);		LStr255::CopyPStr("\pResEdit 2.1.3", prefs->urlPresets[0].name);	LStr255::CopyPStr("\phttp://mirror.macintosharchive.org/macintoshgarden.org/files/apps/ResEdit.sit", prefs->urlPresets[0].url);	prefs->urlPresets[0].index = 0;	prefs->urlPresets[0].inUse = true;		LStr255::CopyPStr("\pDisk Copy 6.3.3", prefs->urlPresets[1].name);	LStr255::CopyPStr("\phttp://mirror.macintosharchive.org/macintoshgarden.org/files/apps/Disk-Copy-633-smi.sit", prefs->urlPresets[1].url);	prefs->urlPresets[1].index = 1;	prefs->urlPresets[1].inUse = true;		LStr255::CopyPStr("\pNetwork Access Disk 7.5", prefs->urlPresets[2].name);	LStr255::CopyPStr("\phttp://68k.party/software/Network_Access_Disk_7.5.sea.bin", prefs->urlPresets[2].url);	prefs->urlPresets[2].index = 2;	prefs->urlPresets[2].inUse = true;		LStr255::CopyPStr("\pLido7 (Disk Initialization)", prefs->urlPresets[3].name);	LStr255::CopyPStr("\phttp://mirror.macintosharchive.org/macintoshgarden.org/files/apps/lido7.56.sit", prefs->urlPresets[3].url);	prefs->urlPresets[3].index = 3;	prefs->urlPresets[3].inUse = true;	LStr255::CopyPStr("\p2020Patch (Extension)", prefs->urlPresets[4].name);	LStr255::CopyPStr("\phttp://mirror.macintosharchive.org/macintoshgarden.org/files/apps/2020Patch1.0.sit", prefs->urlPresets[4].url);	prefs->urlPresets[4].index = 4;	prefs->urlPresets[4].inUse = true;	LStr255::CopyPStr("\pConflict Catcher 4", prefs->urlPresets[5].name);	LStr255::CopyPStr("\phttp://mirror.macintosharchive.org/macintoshgarden.org/files/apps/Conflict_Catcher_401.img_.sit", prefs->urlPresets[5].url);	prefs->urlPresets[5].index = 5;	prefs->urlPresets[5].inUse = true;		LStr255::CopyPStr("\pVirtualCD Imager", prefs->urlPresets[6].name);	LStr255::CopyPStr("\phttp://mirror.macintosharchive.org/macintoshgarden.org/files/apps/VirtualCD_Imager_v1.0d0.sit", prefs->urlPresets[6].url);	prefs->urlPresets[6].index = 6;	prefs->urlPresets[6].inUse = true;	LStr255::CopyPStr("\pSimCity 2000 (CD Version)", prefs->urlPresets[7].name);	LStr255::CopyPStr("\phttp://mirror.macintosharchive.org/macintoshgarden.org/files/games/simcity2000.sit", prefs->urlPresets[7].url);	prefs->urlPresets[7].index = 7;	prefs->urlPresets[7].inUse = true;}bool CPreferencesDialog::LoadPreferences(DownloaderPreferences *prefs){	LPreferencesFile prefsFile(strPrefsFileName, true);	SInt16 prefsRefNum = prefsFile.OpenOrCreateResourceFork(fsRdWrPerm, kCreatorType, kPrefsType, 0);		StResourceContext resContext(prefsRefNum);		// Is there a PREF,128 resource?	StNewResource prefsResource(rPrefsResourceType, rPreferencesResID, sizeof(DownloaderPreferences), true);	Handle hResource = prefsResource.Get();		DownloaderPreferences *prefsInResource = (DownloaderPreferences *)*hResource;	if(prefsInResource->magic != kPrefsMagic)	{		return false;	}	else	{		if(prefsInResource->version == 1)		{			UpgradePrefsToVersion2(hResource);		}			memcpy(prefs, prefsInResource, sizeof(DownloaderPreferences));		return true;	}}void CPreferencesDialog::UpgradePrefsToVersion2(Handle hResource){	DownloaderPreferences *resourcePrefs = (DownloaderPreferences *)*hResource;	LStr255::CopyPStr(strUserAgent, resourcePrefs->userAgent);	resourcePrefs->version = 2;	::ChangedResource(hResource);}bool CPreferencesDialog::SavePreferences(DownloaderPreferences *){	LPreferencesFile prefsFile(strPrefsFileName, true);	SInt16 prefsRefNum = prefsFile.OpenOrCreateResourceFork(fsRdWrPerm, kCreatorType, kPrefsType, 0);		StResourceContext resContext(prefsRefNum);		StNewResource prefsResource(rPrefsResourceType, rPreferencesResID, sizeof(DownloaderPreferences), true);	Handle hResource = prefsResource.Get();			DownloaderPreferences *prefsInResource = (DownloaderPreferences *)*hResource;	memcpy(prefsInResource, &currentPrefs, sizeof(DownloaderPreferences));	::ChangedResource(hResource);	return true;}